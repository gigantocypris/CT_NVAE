import os
import numpy as np
import argparse
import matplotlib.pyplot as plt
from metrics.utils import get_err_vec, get_nelbo_vec, get_min_err_vec

parser = argparse.ArgumentParser(description='Get command line args')
parser.add_argument('--checkpoint_dir', type=str, default='/pscratch/sd/v/vidyagan/output_CT_NVAE/checkpts',
                    help='checkpoint directory')
parser.add_argument('--dataset_type', type=str, default='test',
                    help='dataset type', choices=['train', 'valid', 'test'])
parser.add_argument('--metric', type=str, default='PSNR',
                    help='metric', choices=['MSE', 'SSIM', 'PSNR'])
args = parser.parse_args()

if args.metric == 'MSE':
    metric = 0
elif args.metric == 'SSIM':
    metric = 1
elif args.metric == 'PSNR':
    metric = 2


# September 7, 2023; 100 example sweep, more epochs
JOB_ID_array_100ex_2 = ["15117860 15117895 15117943 15117985 15118018 15118036 15118094 15118135 15118155",
                        "15118176 15118235 15118283 15118329 15118369 15118402 15118435 15118469 15118512",
                        "15118554 15118578 15118604 15118633 15118653 15118680 15118706 15118740 15118764",
                        "15118791 15118843 15118876 15118919 15118978 15119019 15119066 15119092 15119128",
                        "15119170 15119198 15119237 15119269 15119323 15119360 15119402 15119442 15119474",
                        ]

# September 7, 2023; 10 example sweep, more epochs
JOB_ID_array_10ex_2 = ["15117693 15117724 15117745 15117787 15117810 15117832 15117864 15117897 15117938",
                       "15117719 15117744 15117773 15117812 15117841 15117880 15117908 15117949 15117984",
                       "15117838 15117883 15117910 15117961 15118019 15118041 15118072 15118131 15118149",
                       "15118183 15118222 15118257 15118295 15118353 15118386 15118422 15118476 15118508",
                       "15119180 15119209 15119245 15119282 15119336 15119374 15119416 15119460 15119497",
                       ]

# September 8, 2023; Uniform sparsity sweep, 100 examples
JOB_ID_array_100ex_uniform = ["15182330 15182341 15182367 15182395 15182424 15182466 15182511 15182547 15182594",
                              "15182658 15182712 15182754 15182794 15182833 15182878 15182917 15182969 15183020",
                              "15183150 15183196 15183242 15183286 15183327 15183386 15183435 15183493 15183550",
                              "15183600 15183649 15183693 15183730 15183773 15183812 15183861 15183905 15183949",
                              "15184150 15184182 15184221 15184263 15184298 15184345 15184398 15184461 15184507",
                             ]

# September 8, 2023; Random different sweep, 100 examples
JOB_ID_array_100ex_random = ["15182344 15182369 15182398 15182421 15182458 15182506 15182536 15182586 15182633",
                             "15182692 15182731 15182766 15182813 15182857 15182901 15182944 15182997 15183045",
                             "15183170 15183214 15183256 15183310 15183350 15183398 15183452 15183494 15183555",
                             "15183609 15183648 15183694 15183738 15183779 15183835 15183884 15183934 15183983",
                             "15184153 15184193 15184249 15184306 15184351 15184407 15184468 15184546 15184598",
                            ]

# September 8, 2023; Random uniform sweep, try 1, 100 examples
JOB_ID_array_100ex_rand_uni_1 = ["15182359 15182392 15182435 15182477 15182525 15182569 15182626 15182660 15182696",
                                 "15182747 15182797 15182845 15182894 15182946 15182992 15183044 15183112 15183149",
                                 "15183216 15183270 15183304 15183347 15183399 15183439 15183481 15183521 15183572",
                                 "15183628 15183673 15183722 15183761 15183804 15183860 15183910 15183954 15183996",
                                 "15184157 15184202 15184258 15184295 15184334 15184406 15184472 15184527 15184583",
                                ]

# September 8, 2023; Random uniform sweep, try 2, 100 examples
JOB_ID_array_100ex_rand_uni_2 = ["15182387 15182436 15182480 15182516 15182557 15182595 15182635 15182664 15182697",
                                 "15182776 15182824 15182872 15182925 15182977 15183037 15183087 15183132 15183174",
                                 "15183246 15183292 15183348 15183404 15183449 15183502 15183562 15183612 15183662",
                                 "15183768 15183811 15183863 15183908 15183957 15184004 15184037 15184055 15184072",
                                 "15184158 15184211 15184270 15184311 15184377 15184445 15184501 15184537 15184588",
                                ]

# September 8, 2023; Random uniform sweep, try 3, 100 examples
JOB_ID_array_100ex_rand_uni_3 = ["15182407 15182442 15182473 15182507 15182548 15182593 15182630 15182661 15182699",
                                 "15182752 15182795 15182834 15182882 15182927 15182974 15183014 15183077 15183122",
                                 "15183206 15183253 15183295 15183340 15183379 15183418 15183467 15183514 15183559",
                                 "15183618 15183665 15183715 15183758 15183796 15183836 15183868 15183915 15183963",
                                 "15184164 15184208 15184243 15184292 15184347 15184420 15184479 15184521 15184566",
                                ]

# September 11, 2023; Random sweep, 1 normalizing flow
JOB_ID_array_100ex_rand_normflow = ["15458967 15458974 15458981 15458988 15458995 15459002 15459009 15459016 15459023",
                                    "15459031 15459038 15459045 15459052 15459059 15459068 15459075 15459082 15459089",
                                    "15459098 15459106 15459113 15459120 15459127 15459134 15459141 15459148 15459155",
                                    "15459163 15459170 15459177 15459184 15459191 15459199 15459207 15459214 15459221",
                                    "15459242 15459249 15459256 15459263 15459270 15459277 15459284 15459293 15459302",
                                   ]
# September 13, 2023
# normalizing flow, uniform angles, 100 examples

JOB_ID_array_100ex_uniform_normflow_1 = ["15574529 15574536 15574544 15574556 15574563 15574570 15574577 15574589 15574596",
                                         "15574612 15574619 15574630 15574639 15574649 15574667 15574687 15574703 15574722",
                                         "15574760 15574780 15574794 15574813 15574836 15574870 15574909 15574951 15575022",
                                         "15575100 15575166 15575239 15575333 15575412 15575510 15575590 15575665 15575748",
                                         "15575980 15576055 15576137 15576197 15576259 15576321 15576397 15576475 15576582",
                                        ]

# normalizing flow, random, changing angles, 100 examples

JOB_ID_array_100ex_rand_normflow_1 = ["15574644 15574658 15574682 15574697 15574717 15574731 15574752 15574763 15574783",
                                      "15574830 15574856 15574888 15574939 15574999 15575071 15575134 15575202 15575282",
                                      "15575398 15575506 15575585 15575660 15575729 15575830 15575899 15575974 15576049",
                                      "15576129 15576207 15576294 15576358 15576428 15576514 15576651 15576797 15576920",
                                      # "15579754 15580019 15580096 15580185 15580286 15580419 15580510 15580588 15580638",
                                     ]

# normalizing flow, random, same 1, 100 examples

JOB_ID_array_100ex_rand_same1_normflow_1 = ["15574802 15574821 15574854 15574884 15574929 15574987 15575045 15575113 15575181",
                                            "15575274 15575342 15575409 15575517 15575603 15575673 15575765 15575844 15575919",
                                            "15576010 15576076 15576156 15576218 15576281 15576367 15576440 15576516 15576606",
                                            "15576778 15576934 15577039 15577156 15577260 15577364 15577464 15577559 15577653",
                                            # "15579746 15579857 15580064 15580138 15580221 15580310 15580438 15580542 15580618",
                                           ]

# normalizing flow, random, same 2, 100 examples

JOB_ID_array_100ex_rand_same2_normflow_1 = ["15574901 15574938 15574998 15575070 15575140 15575204 15575288 15575362 15575471",
                                            "15575580 15575656 15575719 15575812 15575874 15575933 15575990 15576070 15576140",
                                            "15576221 15576289 15576374 15576443 15576506 15576616 15576720 15576893 15577018",
                                            "15577147 15577262 15577377 15577466 15577555 15577680 15577779 15577887 15577985",
                                            # "15579738 15579829 15580039 15580126 15580238 15580332 15580446 15580519 15580596",
                                           ]

# normalizing flow, random, same 3, 100 examples

JOB_ID_array_100ex_rand_same3_normflow_1 = ["15574966 15575029 15575101 15575168 15575244 15575302 15575379 15575489 15575591",
                                            "15575688 15575762 15575845 15575895 15575952 15576020 15576086 15576169 15576236",
                                            # "15576331 15576398 15576479 15576596 15576773 15576866 15577042 15577138 15577237",
                                            "15577376 15577493 15577602 15577699 15577799 15577889 15577995 15578085 15578156",
                                            # "15579720 15579820 15580024 15580105 15580182 15580275 15580390 15580504 15580563",
                                           ]

# Round 2
# normalizing flow, uniform angles, 100 examples

JOB_ID_array_100ex_uniform_normflow_2 = ["15576463 15576533 15576678 15576860 15576970 15577080 15577191 15577284 15577383",
                                         "15577537 15577650 15577758 15577842 15577923 15578011 15578098 15578174 15578247",
                                         "15578346 15578413 15578479 15578542 15578613 15578678 15578748 15578807 15578874",
                                         "15578963 15579028 15579104 15579159 15579221 15579288 15579448 15579542 15579608",
                                        #  "15579706 15579793 15579990 15580110 15580204 15580298 15580451 15580534 15580606",
                                        ]

# normalizing flow, random, changing angles, 100 examples

JOB_ID_array_100ex_rand_normflow_2 = ["15576511 15576656 15576780 15576890 15577020 15577134 15577225 15577319 15577403",
                                      "15577535 15577659 15577765 15577853 15577961 15578042 15578123 15578188 15578252",
                                      "15578336 15578397 15578455 15578519 15578579 15578640 15578712 15578784 15578849",
                                      "15578924 15578989 15579063 15579126 15579186 15579244 15579339 15579489 15579568",
                                    #   "15579697 15579789 15579903 15580078 15580166 15580265 15580378 15580469 15580546",
                                     ]

# normalizing flow, random, same 1, 100 examples

JOB_ID_array_100ex_rand_same1_normflow_2 = ["15576525 15576688 15576805 15576926 15577034 15577140 15577245 15577338 15577436",
                                            "15577588 15577710 15577806 15577882 15577979 15578076 15578149 15578225 15578279",
                                            "15578360 15578418 15578481 15578545 15578609 15578668 15578756 15578809 15578875",
                                            "15578949 15579019 15579086 15579151 15579217 15579280 15579436 15579537 15579598",
                                            # "15579690 15579759 15579898 15580081 15580170 15580273 15580386 15580487 15580561",
                                           ]

# normalizing flow, random, same 2, 100 examples

JOB_ID_array_100ex_rand_same2_normflow_2 = ["15576555 15576683 15576812 15576910 15577028 15577106 15577219 15577304 15577400",
                                            "15577548 15577632 15577719 15577811 15577895 15577986 15578064 15578141 15578213",
                                            "15578298 15578358 15578421 15578488 15578553 15578627 15578682 15578747 15578814",
                                            "15578897 15578959 15579023 15579096 15579158 15579220 15579289 15579452 15579557",
                                            # "15579685 15579787 15579992 15580088 15580164 15580254 15580363 15580455 15580527",
                                           ]

# normalizing flow, random, same 3, 100 examples

JOB_ID_array_100ex_rand_same3_normflow_2 = ["15576584 15576704 15576839 15576974 15577076 15577162 15577279 15577365 15577465",
                                            "15577585 15577691 15577790 15577862 15577940 15578032 15578110 15578189 15578262",
                                            "15578347 15578411 15578477 15578536 15578604 15578669 15578736 15578804 15578868",
                                            "15578954 15579015 15579085 15579148 15579215 15579272 15579411 15579522 15579584",
                                            # "15579680 15579740 15579853 15580071 15580163 15580247 15580364 15580463 15580539",
                                           ]


# COVID

## 100 examples

### uniform
JOB_ID_array_100ex_uniform_covid = ["15629752 15629761 15629771 15629780 15629787 15629794 15629801 15629808 15629815",
                                    "15629824 15629832 15629839 15629846 15629853 15629860 15629867 15629874 15629881",
                                    "15629889 15629896 15629952 15629959 15629967 15629974 15629981 15629988 15629995",
                                    "15630003 15630011 15630018 15630026 15630033 15630040 15630049 15630071 15630085",
                                    "15630116 15630125 15630134 15630141 15630148 15630156 15630164 15630171 15630181",
                                   ]

### random, changing

JOB_ID_array_100ex_rand_covid = ["15630198 15630205 15630221 15630303 15630325 15630355 15630383 15630417 15630447",
                                 "15630482 15630510 15630542 15630569 15630602 15630632 15630660 15630689 15630782",
                                 "15630961 15631041 15631087 15631131 15631172 15631221 15631268 15631317 15631355",
                                 "15631408 15631448 15631483 15631521 15631557 15631595 15631632 15631677 15631715",
                                 "15631763 15631801 15631830 15631858 15631892 15631918 15631940 15631964 15631989",
                                 ]
### random, fixed 1

JOB_ID_array_100ex_rand_same1_covid = ["15630209 15630290 15630311 15630335 15630369 15630397 15630427 15630458 15630483",
                                       "15630519 15630550 15630576 15630610 15630638 15630667 15630698 15630798 15630953",
                                       "15631050 15631098 15631145 15631186 15631233 15631279 15631325 15631370 15631407",
                                       "15631459 15631498 15631534 15631569 15631604 15631643 15631683 15631724 15631764",
                                       "15632902 15632914 15632947 15632970 15633006 15633020 15633035 15633052 15633068",
                                      ]

### random, fixed 2

JOB_ID_array_100ex_rand_same2_covid = ["15630304 15630326 15630356 15630384 15630416 15630446 15630477 15630504 15630531",
                                       "15630570 15630600 15630633 15630662 15630690 15630784 15630942 15631030 15631088",
                                       "15631149 15631189 15631238 15631283 15631329 15631368 15631406 15631443 15631479",
                                       "15631530 15631568 15631606 15631645 15631685 15631725 15631766 15631802 15631831",
                                       "15631866 15631896 15631922 15631944 15631970 15631994 15632024 15632045 15632059",
                                      ]

### random, fixed 3

JOB_ID_array_100ex_rand_same3_covid = ["15630329 15630358 15630386 15630418 15630448 15630476 15630505 15630532 15630560",
                                       "15630603 15630631 15630661 15630691 15630775 15630940 15631028 15631083 15631130",
                                       "15631182 15631229 15631264 15631316 15631358 15631394 15631436 15631472 15631513",
                                       "15631558 15631597 15631631 15631674 15631711 15631748 15631788 15631821 15631849",
                                       "15632907 15632922 15632957 15632975 15633009 15633023 15633040 15633057 15633074",
                                      ]

## 10 examples, regular noise
### uniform
JOB_ID_array_10ex_uniform_covid = ["15687893 15687901 15687908 15687916 15687923 15687930 15687937 15687944 15687951",
                                   "15687994 15688009 15688023 15688042 15688062 15688077 15688093 15688107 15688124",
                                   "15688152 15688179 15688209 15688235 15688272 15688307 15688343 15688386 15688435",
                                   "15688509 15688585 15688673 15688740 15688808 15688873 15688957 15689073 15689147",
                                   # FAILED SUBMIT
                                  ]

### random, changing

JOB_ID_array_10ex_rand_covid = ["15687958 15687965 15687973 15687980 15687987 15687995 15688008 15688025 15688039",
                                "15688113 15688136 15688158 15688187 15688216 15688242 15688273 15688308 15688339",
                                "15688394 15688445 15688501 15688558 15688632 15688704 15688774 15688856 15688937",
                                "15689080 15689150 15689236 15689349 15689404 15689514 15689619 15689687 15689773",
                                # FAILED SUBMIT
                               ]
### random, fixed 1

JOB_ID_array_10ex_rand_same1_covid = ["15688040 15688065 15688078 15688092 15688106 15688126 15688146 15688169 15688198",
                                      "15688237 15688269 15688305 15688342 15688382 15688439 15688497 15688561 15688633",
                                      "15688735 15688832 15688894 15688973 15689078 15689142 15689212 15689282 15689391",
                                      "15689505 15689615 15689685 15689764 15689837 15689904 15689961 15690016 15690083",
                                      # FAILED SUBMIT
                                     ]

### random, fixed 2

JOB_ID_array_10ex_rand_same2_covid = ["15688155 15688185 15688214 15688240 15688276 15688309 15688345 15688385 15688437",
                                      "15688508 15688570 15688646 15688728 15688787 15688848 15688930 15689043 15689134",
                                      "15689252 15689364 15689476 15689535 15689638 15689725 15689799 15689890 15689953",
                                      "15690032 15690087 15690138 15690193 15690245 15690298 15690347 15690423 15690477",
                                      # FAILED SUBMIT
                                     ]

### random, fixed 3

JOB_ID_array_10ex_rand_same3_covid = ["15688247 15688280 15688316 15688355 15688398 15688455 15688528 15688597 15688663",
                                      "15688760 15688846 15688914 15689041 15689109 15689185 15689248 15689361 15689426",
                                      "15689542 15689636 15689692 15689766 15689831 15689888 15689949 15690006 15690054",
                                      "15690139 15690191 15690247 15690299 15690348 15690418 15690467 15690517 15690562",
                                      # FAILED SUBMIT
                                     ]
## 10 examples, better SNR
### uniform
JOB_ID_array_10ex_uniform_covid_snr = ["15688341 15688384 15688440 15688494 15688556 15688622 15688700 15688761 15688826",
                                       "15688921 15688975 15689096 15689194 15689268 15689394 15689489 15689546 15689659",
                                       "15689761 15689838 15689900 15689967 15690027 15690089 15690155 15690204 15690249",
                                       "15824058 15824065 15824072 15824079 15824087 15824094 15824101 15824108 15824115",
                                       # FAILED SUBMIT
                                      ]

### random, changing

JOB_ID_array_10ex_rand_covid_snr = ["15688393 15688447 15688500 15688553 15688627 15688691 15688749 15688814 15688895",
                                    "15689047 15689117 15689193 15689264 15689376 15689484 15689547 15689657 15689737",
                                    "15689820 15689887 15689952 15690009 15690061 15690134 15690197 15690254 15690306",
                                    "15824134 15824141 15824148 15824156 15824163 15824170 15824177 15824184 15824191",
                                    # FAILED SUBMIT
                                   ]
### random, fixed 1

JOB_ID_array_10ex_rand_same1_covid_snr = ["15688450 15688511 15688575 15688666 15688732 15688809 15688882 15688945 15689077",
                                          "15689156 15689241 15689352 15689423 15689520 15689621 15689690 15689763 15689832",
                                          "15689912 15689971 15690031 15690094 15690167 15690217 15690267 15690323 15690396",
                                          "15824210 15824217 15824227 15824234 15824247 15824254 15824261 15824268 15824275",
                                          # FAILED SUBMIT
                                         ]

### random, fixed 2

JOB_ID_array_10ex_rand_same2_covid_snr = ["15688488 15688546 15688610 15688690 15688779 15688860 15688932 15689060 15689141",
                                          "15689232 15689350 15689420 15689513 15689616 15689682 15689762 15689836 15689902",
                                          "15689984 15690042 15690123 15690186 15690234 15690282 15690332 15690411 15690464",
                                          "15824295 15824302 15824309 15824316 15824323 15824331 15824338 15824346 15824354",
                                          # FAILED SUBMIT
                                         ]

### random, fixed 3

JOB_ID_array_10ex_rand_same3_covid_snr = ["15688580 15688667 15688736 15688807 15688893 15689038 15689112 15689189 15689255",
                                          "15689377 15689478 15689545 15689641 15689733 15689797 15689878 15689947 15689994",
                                          "15690068 15690136 15690194 15690252 15690307 15690358 15690434 15690481 15690528",
                                          "15824387 15824398 15824407 15824420 15824440 15824472 15824505 15824530 15824547",
                                          # FAILED SUBMIT
                                         ]

# Trying out masks vs. no masks, nov 2023
JOB_ID_array_uniform_use_masks = ["17836537 17836558 17836584 17836597 17836609 17836638 17836650 17836907 17836917"]
JOB_ID_array_uniform_no_masks = ["17838334 17838342 17838352 17838360 17838370 17838384 17838403 17838419 17838433"]

JOB_ID_array_random_use_masks = ["17838491 17838516 17838532 17838553 17838566 17838573 17838580 17838590 17838600"]
JOB_ID_array_random_no_masks = ["17838666 17838675 17838683 17838691 17838701 17838710 17838720 17838727 17838735"]

JOB_ID_array_random_constant_0_use_masks = ["17838953 17838967 17838984 17838997 17839013 17839027 17839041 17839057 17839072"]
JOB_ID_array_random_constant_0_no_masks = ["17839632 17839639 17839647 17839655 17839662 17839669 17839676 17839683 17839690"]

JOB_ID_array_random_constant_1_use_masks = ["17839823 17839948 17839955 17839964 17839974 17839982 17839991 17840001 17840009"]
JOB_ID_array_random_constant_1_no_masks = ["17840025 17840035 17840046 17840063 17840084 17840096 17840111 17840123 17840134"]

JOB_ID_array_random_constant_2_use_masks = ["17840152 17840166 17840176 17840186 17840198 17840211 17840227 17840239 17840255"]
JOB_ID_array_random_constant_2_no_masks = ["17840282 17840289 17840297 17840307 17840318 17840340 17840350 17840359 17840369"]

JOB_ID_array = JOB_ID_array_random_constant_2_no_masks
JOB_ID_array_mat=[]
for JOB_ID_subarray in JOB_ID_array:
    JOB_ID_subarray = JOB_ID_subarray.split(" ")
    JOB_ID_array_mat.append(JOB_ID_subarray)
JOB_ID_array_mat = np.array(JOB_ID_array_mat)

description = 'NVAE_' # description can be 'NVAE_' or 'ring_' or ''
algorithm = 'gridrec'
all_err_vec_NVAE, max_err_vec_NVAE, median_err_vec_NVAE, min_err_vec_NVAE, mean_err_vec_NVAE = get_err_vec(JOB_ID_array_mat, args.checkpoint_dir, args.dataset_type, metric, description, algorithm=algorithm)

description = '' # description can be 'NVAE_' or 'ring_' or ''
algorithm = 'gridrec'
all_err_vec_gridrec, max_err_vec_gridrec, median_err_vec_gridrec, min_err_vec_gridrec, mean_err_vec_gridrec = get_err_vec(JOB_ID_array_mat, args.checkpoint_dir, args.dataset_type, metric, description, algorithm=algorithm)

description = '' # description can be 'NVAE_' or 'ring_' or ''
algorithm = 'tv'
all_err_vec_tv, max_err_vec_tv, median_err_vec_tv, min_err_vec_tv, mean_err_vec_tv = get_err_vec(JOB_ID_array_mat, args.checkpoint_dir, args.dataset_type, metric, description, algorithm=algorithm)

description = '' # description can be 'NVAE_' or 'ring_' or ''
algorithm = 'sirt'
all_err_vec_sirt, max_err_vec_sirt, median_err_vec_sirt, min_err_vec_sirt, mean_err_vec_sirt = get_err_vec(JOB_ID_array_mat, args.checkpoint_dir, args.dataset_type, metric, description, algorithm=algorithm)

all_neg_log_p, all_nelbo, min_ind_neg_log_p, min_ind_nelbo = get_nelbo_vec(JOB_ID_array_mat, args.checkpoint_dir, args.dataset_type)

min_ind_vec = min_ind_nelbo
best_JOB_ID = get_min_err_vec(JOB_ID_array_mat, min_ind_vec)
err_vec_NVAE = get_min_err_vec(all_err_vec_NVAE, min_ind_vec)
err_vec_gridrec = get_min_err_vec(all_err_vec_gridrec, min_ind_vec)
err_vec_tv = get_min_err_vec(all_err_vec_tv, min_ind_vec)
err_vec_sirt = get_min_err_vec(all_err_vec_sirt, min_ind_vec)

# Compare to actual min/max and values that we get from min nelbo
if args.metric == 'MSE':
    best_err_vec_NVAE = min_err_vec_NVAE
    best_err_vec_gridrec = min_err_vec_gridrec
    best_err_vec_tv = min_err_vec_tv
    best_err_vec_sirt = min_err_vec_sirt
else:
    best_err_vec_NVAE = max_err_vec_NVAE
    best_err_vec_gridrec = max_err_vec_gridrec
    best_err_vec_tv = max_err_vec_tv
    best_err_vec_sirt = max_err_vec_sirt


plt.figure()
plt.plot(err_vec_NVAE, 'b', label='NVAE')
plt.plot(err_vec_gridrec, 'g', label='gridrec')
plt.plot(err_vec_tv, 'r', label='tv')
plt.plot(err_vec_sirt, 'y', label='sirt')
plt.legend()

plt.plot(all_err_vec_NVAE.T, 'b.')
plt.plot(all_err_vec_gridrec.T, 'g.')
plt.plot(all_err_vec_tv.T, 'r.')
plt.plot(all_err_vec_sirt.T, 'y.')
plt.ylim([-2.5, 15])
plt.savefig("angle_sweep_compare" + JOB_ID_array_mat[0,0] + ".png")

print("best_JOB_ID", best_JOB_ID)


